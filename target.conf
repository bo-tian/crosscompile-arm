#!/bin/sh

TRIPLE=arm-linux-gnueabihf # ARM with hardfloat
MARCH=armv7-a # v7, Cortex series

MCPU=generic	# for all armv7-a cpu
MFPU=vfpv3-d16 	# keep compatible to all armv7-a cpu

MCPU=cortex-a15	# for cortex-a15
MFPU=neon-vfpv4	# for cortex-a15

ARM="-target ${TRIPLE} -march=${MARCH} -mcpu=${MCPU} -mfpu=${MFPU}"

LINUX="linux-2.6.36" # for most embedded system

CC="clang -v -O3"
CXX="${CC}"
AR="llvm-ar"
RANLIB="llvm-ranlib"

# location of current file
DIR=`dirname "$(readlink -f "$0")"`
REPO=${DIR}/repo
SYSROOT=${DIR}/sdk/${MCPU}/sysroot
BOOTSTRAP=${DIR}/sdk/bootstrap
TARGET=${DIR}/sdk/${MCPU}/target
BUILD=${DIR}/build_dir

REPO=/home/repo

CFLAGS="${ARM} --sysroot=${SYSROOT} -rtlib=compiler-rt -isystem ${SYSROOT}/${LINUX}/include"
CXXFLAGS="${CFLAGS} -nostdinc++ -stdlib=libc++ -isystem ${SYSROOT}/usr/include/c++"

cc=`which clang | grep clang`
if [ ! -z "${cc}" ]; then
	echo ---- Please install llvm/clang ----
fi

rt=`clang ${CFLAGS} -print-libgcc-file-name`
if [ ! -f "${rt}" ]; then
	echo ---- Please build compiler-rt first, then copy that library to ${rt} ----
fi

lld=`ld -v | grep LLD`
if [ ! -z "${lld}" ]; then
	echo ----
	echo "Please replace system ld with lld(llvm).(Ex, cp -v ld ld.origin; cp -v ld.lld ld)"
	echo ----
fi

if [ ! -d ${REPO} ]; then
	echo ---- Create directory REPO:${REPO} where the source code are stored. ----
	mkdir -pv ${REPO}
fi

if [ ! -d ${BUILD} ]; then
	echo ---- Create directory BUILD:${BUILD} where the source code are compiled ----
	mkdir -pv ${BUILD}
fi

if [ ! -d ${SYSROOT} ]; then
	echo ---- Create directory SYSROOT:${SYSROOT} where static libraries and include header files are stored ----
	mkdir -pv ${SYSROOT}/include ${SYSROOT}/usr/include ${SYSROOT}/lib
	echo ---- compiler-rt needs stdlib.h ----
	cp -v bootstrap/stdlib.h ${SYSROOT}/include/
	echo ---- prepare linux include files ----
	cp -rv bootstrap/${LINUX} ${SYSROOT}/
fi

if [ ! -d ${TARGET} ]; then
	echo ---- Create directory TARGET: ${TARGET} where shared libraries and binaries are stored ----
	mkdir -pv ${TARGET}/lib ${TARGET}/bin
fi

